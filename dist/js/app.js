function validateOnSubmit(e){_.each(e,function(e){e.validateInput(),e.input[0].setCustomValidity(e.getMessage())})}var app=app||{};!function(){app.Event=Backbone.Model.extend({defaults:{name:"",type:"",host:"",startTime:"",endTime:"",guestList:"Coolest people on earth",location:"",extraInfo:"No additional information",color:"#fec000"}})}();var app=app||{};!function(){app.User=Backbone.Model.extend({defaults:{login:!1,userName:"",userEmail:"",userPwd:""},localStorage:new Backbone.LocalStorage("user")})}(),$(function(){var e=new app.User({id:1}),t=new app.RegisterView({model:e});new app.MainView;var s=$("#submit");s.click(function(){validateOnSubmit(t.formInputs)})});var app=app||{};!function(){app.EventsCollection=Backbone.Collection.extend({model:app.Event,localStorage:new Backbone.LocalStorage("events")}),app.events=new app.EventsCollection}();var app=app||{};!function(){var e=Backbone.Router.extend({routes:{"":"defaultView","list-events":"listEvents"},defaultView:function(){$(".event-form").addClass("open"),$(".events-view").removeClass("open"),$(".addEvent").addClass("current"),$(".listEvent").removeClass("current"),$("#event-name").focus()},listEvents:function(){$(".event-form").removeClass("open"),$(".events-view").addClass("open"),$(".addEvent").removeClass("current"),$(".listEvent").addClass("current")}});app.router=new e,Backbone.history.start()}();var app=app||{};!function(e){app.EventView=Backbone.View.extend({tagName:"li",className:"event",template:_.template(e("#event-template").html()),intialize:function(){this.listenTo(this.model,"change",this.render)},render:function(){this.$el.html(this.template(this.model.attributes));var e=this.model.get("color");return this.$el.css({background:e,"border-color":e}),this}})}(jQuery);var app=app||{};!function(e){app.MainView=Backbone.View.extend({el:".planer-app",events:{"click #add":"validate","submit #add-event":"createEvent","change input, textarea":"progress"},initialize:function(){this.$list=e(".event-list"),this.$eventsView=e(".events-view"),this.$eventForm=e(".event-form"),this.$progress=e("#e-f-p"),this.formProgress=1,this.eventHost=new SuperInput(e("#event-host")),this.endTime=new SuperInput(e("#end-time")),this.guestList=new SuperInput(e("#guest-list")),this.extraInfo=new SuperInput(e("#extra-info")),this.eventColor=new SuperInput(e("#event-color")),this.eventName=new SuperInput(e("#event-name")),this.eventType=new SuperInput(e("#event-type")),this.startTime=new SuperInput(e("#start-time")),this.eventLocation=new SuperInput(e("#event-location")),this.requiredInputs=[this.eventName,this.eventType,this.eventHost,this.eventLocation,this.guestList,this.startTime,this.endTime],_.each(this.requiredInputs,function(e){e.requirements.push(app.FormErrorChecker.required),e.checkOnChange()}),this.startTime.requirements.push(app.FormErrorChecker.laterThanNow),this.endTime.requirements.push(app.FormErrorChecker.laterThanNow,function(t){var s=e("#start-time").val();if(t)return Date.parse(t)<=Date.parse(s)?"This should happen later than start time":""}),this.$form=e("#add-event"),e("#event-color").val("#FECE00"),this.appHeight=this.$eventForm[0].offsetHeight,this.listenTo(app.events,"add",this.appendItem),app.events.fetch(),this.render()},render:function(){this.$eventsView.css("margin-top",-this.appHeight),this.$eventsView.css("height",this.appHeight)},appendItem:function(e){var t=new app.EventView({model:e});this.$list.append(t.render().el)},validate:function(){validateOnSubmit(this.requiredInputs)},createEvent:function(){return app.events.create({name:this.eventName.getInputValue(),type:this.eventType.getInputValue(),host:this.eventHost.getInputValue(),startTime:this.startTime.getInputValue(),endTime:this.endTime.getInputValue(),guestList:this.eventLocation.getInputValue(),location:this.guestList.getInputValue(),extraInfo:this.extraInfo.getInputValue(),color:this.eventColor.getInputValue()}),this.resetForm(),!1},resetForm:function(){this.$form[0].reset(),this.$progress.val(0),e("#event-color").val("#FECE00")},progress:function(){this.formProgress=0,_.each(this.requiredInputs,function(e){e.isValid&&this.formProgress++},this),this.$progress.val(this.formProgress)}})}(jQuery);var app=app||{};!function(e){app.RegisterView=Backbone.View.extend({el:".user-state",events:{"click #regist-btn":"showRegist","submit #registration":"saveUser","change input":"updateProgress"},template:_.template(e("#user-template").html()),initialize:function(){this.formLayer=e(".regist"),this.registBtn=e("#regist-btn"),this.$userInfo=e("#user"),this.form=e("#registration"),this.jobTitle=e("#jobTitle"),this.submitBtn=e("#submit"),this.$progress=e("#r-f-p"),this.formProgress=0,this.sNameInput=new SuperInput(e("#name")),this.sNameInput.requirements=[app.FormErrorChecker.required,app.FormErrorChecker.nameWithSpace],this.sEmailInput=new SuperInput(e("#email")),this.sEmailInput.requirements=[app.FormErrorChecker.required,app.FormErrorChecker.validEmail],this.sPwdInput=new SuperInput(e("#password")),this.sPwdInput.requirements=[app.FormErrorChecker.required,app.FormErrorChecker.minLength(6),app.FormErrorChecker.maxLength(16),app.FormErrorChecker.alphaNumeric,app.FormErrorChecker.hasNumber,app.FormErrorChecker.hasLetter],this.formInputs=[this.sNameInput,this.sEmailInput,this.sPwdInput],this.sNameInput.checkOnChange(),this.sEmailInput.checkOnChange(),this.sPwdInput.checkOnChange().checkOnKeyup(),e(".regist-form").click(function(e){e.stopPropagation()}),e(".regist, .close-form").click(function(){e(".regist").hide(),e("#event-name").focus()}),this.listenTo(this.model,"change",this.render),this.model.fetch(),this.render()},render:function(){this.updateProgress(),this.model.get("login")?(this.formLayer.hide(),this.registBtn.hide(),e("#event-name").focus(),this.$userInfo.html(this.template({name:this.model.get("userName")}))):(this.formLayer.show(),this.sNameInput.input.focus(),this.registBtn.show())},showRegist:function(){this.render()},saveUser:function(){this.model.save({userName:this.sNameInput.getInputValue(),userEmail:this.sEmailInput.getInputValue(),userPwd:this.sPwdInput.getInputValue(),jboTitle:this.jobTitle.val(),login:!0})},updateProgress:function(){this.formProgress=0,_.each(this.formInputs,function(e){e.isValid&&this.formProgress++},this),this.$progress.val(this.formProgress)}})}(jQuery);var app=app||{};!function(){var e=/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,t=/^[a-z]+$/i,s=/^[a-z0-9]+$/i,n=/^\s+$/,r=/^[a-zA-Z ]*$/;app.FormErrorMessages={required:"This field is required.",validEmail:"The email address is not valid.",minLength:"This field must contain at least %s characters.",maxLength:"This field must not exceed %s characters in length.",alpha:"This field must only contain alphabetical characters.",alphaNumeric:"This field must only contain alpha-numeric characters.",hasNumber:"This field must contain number.",hasLetter:"This field must contain letter.",nameWithSpace:"This field must only contain alphabetical characters and space between.",laterThanNow:"This should happen at a later time"},app.FormErrorChecker={required:function(e){return n.test(e)?app.FormErrorMessages.required:e.length<1?app.FormErrorMessages.required:""},validEmail:function(t){return e.test(t)?"":app.FormErrorMessages.validEmail},minLength:function(e){return function(t){return t.length<e?app.FormErrorMessages.minLength.replace("%s",e):""}},maxLength:function(e){return function(t){return t.length>e?app.FormErrorMessages.maxLength.replace("%s",e):""}},alpha:function(e){return t.test(e)?"":app.FormErrorMessages.alpha},alphaNumeric:function(e){return s.test(e)?"":app.FormErrorMessages.alphaNumeric},hasNumber:function(e){return e.match(/\d/g)?"":app.FormErrorMessages.hasNumber},hasLetter:function(e){return e.match(/[a-z,A-z]/g)?"":app.FormErrorMessages.hasLetter},nameWithSpace:function(e){return r.test(e)?"":app.FormErrorMessages.nameWithSpace},laterThanNow:function(e){if(e)return Date.parse(e)<(new Date).getTime()?app.FormErrorMessages.laterThanNow:""}}}();var SuperInput=function(e){this.input=e,this.requirements=[],this.isValid=!1,this.alertEl=e.parent().find(".alert")};SuperInput.prototype={getInputValue:function(){return this.input.val()},addMessage:function(e){this.messages.push(e)},getMessage:function(){var e="";return this.messages.length>0&&(e=this.messages.join(". \n")),e},validateInput:function(){var e=this.getInputValue();this.messages=[],_.each(this.requirements,function(t){var s=t(e);s&&this.addMessage(s)},this),this.messages.length?this.isValid=!1:this.isValid=!0},checkOnChange:function(){var e=this;return this.input.on("change blur",function(){e.validateInput(),e.alert()}),e},checkOnKeyup:function(){var e=this;return this.input.on("keyup",function(){e.validateInput(),e.alert()}),e},alert:function(){this.isValid?(this.alertEl.html(""),this.input.removeClass("invalid")):(this.alertEl.html(this.getMessage()),this.input.addClass("invalid"))}};
//# sourceMappingURL=data:application/json;base64,
